/*
 * Copyright 2014 Andrew Reitz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply from: rootProject.file('gradle/javaDoc.gradle')
apply from: rootProject.file('gradle/bintray.gradle')
apply from: rootProject.file('gradle/artifactory.gradle')

targetCompatibility = JavaVersion.VERSION_1_6
sourceCompatibility = JavaVersion.VERSION_1_6

configurations {
  tools
}

dependencies {
  compile 'com.google.android:android:4.1.1.4', optional
  compile "io.reactivex:rxjava:${commonVersions.rxjava}", optional
  compile 'org.objenesis:objenesis:2.1', optional

  testCompile 'org.codehaus.groovy:groovy-all:2.3.6'
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

  tools "com.googlecode.jarjar:jarjar:1.3"
}

task publishJavadoc(type: Exec) {
  dependsOn "javadoc"
  commandLine "bash", "-c",
"""
  REPO="git@github.com:pieces029/shillelagh.git"
  DIR=temp-clone

  # Delete any existing temporary website clone
  rm -rf \$DIR

  # Clone the current repo into temp folder
  git clone \$REPO \$DIR

  # Move working directory into temp folder
  cd \$DIR

  # Checkout and track the gh-pages branch
  git checkout -t origin/gh-pages

  # Delete everything
  rm -rf *

  # Copy everything from javadocs folder
  cp -r $buildDir/docs/javadoc/* .

  # Stage all files in git and create a commit
  git add .
  git add -u
  git commit -m "Website at \$(date)"

  # Push the new files up to GitHub
  git push origin gh-pages

  # Delete our temp folder
  cd ..
  rm -rf \$DIR
"""
}

task jarjar(type: Jar, dependsOn: jar) {
  destinationDir = jar.destinationDir
  baseName = jar.baseName
  appendix = jar.appendix
  classifier = jar.classifier
  includeEmptyDirs = false
  def target = new File("${archivePath}.tmp")

  doFirst {
    from zipTree(target)
    ant {
      taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: configurations.tools.asPath
      jarjar(jarfile: target) {
        zipfileset(src: jar.archivePath)
        zipfileset(src: configurations.runtime.files.find { it.name.startsWith('objenesis') })
        rule pattern: 'org.objenesis.**', result: 'shillelagh.internal.objenesis.@1'
      }
    }

  }
  doLast {
    target.delete()
  }
}
jar.finalizedBy jarjar

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar {
        classifier "sources"
      }

      artifact javadocJar {
        classifier "javadoc"
      }

      groupId 'com.andrewreitz'
      artifactId 'shillelagh'

      pom.withXml {
        def Node root = asNode()
        root.appendNode('name', 'Shillelagh')
        root.appendNode('description', 'Shillelagh Sqlite Android library')
        root.appendNode('url', 'https://github.com/pieces029/shillelagh')

        def issues = root.appendNode('issueManagement')
        issues.appendNode('system', 'github')
        issues.appendNode('url', 'https://github.com/pieces029/shillelagh/issues')

        def scm = root.appendNode('scm')
        scm.appendNode('url', 'scm:https://github.com/pieces029/shillelagh')
        scm.appendNode('connection', 'scm:git:git@github.com:pieces029/shillelagh.git')
        scm.appendNode('developerConnection', 'scm:git:git@github.com:pieces029/shillelagh.git')

        def license = root.appendNode('licenses').appendNode('license');
        license.appendNode('name', 'The Apache Software License, Version 2.0')
        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        license.appendNode('distribution', 'repo')

        def dev = root.appendNode('developers').appendNode('developer');
        dev.appendNode('id', 'areitz')
        dev.appendNode('name', 'Andrew Reitz')
        dev.appendNode('email', 'andrew@andrewreitz.com')
        dev.appendNode('organizationUrl', 'http://andrewreitz.com')
      }
    }
  }
}
