/*
 * Copyright 2014 Andrew Reitz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package shillelagh.internal;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Set of utility functions used by code generated by shillelagh.
 */
public final class ShillelaghUtil {

  /**
   * Takes an object and serializes it to a byte array. Don't enforce that it extends serializable
   * to allow for lists and maps to be passed in.
   *
   * @param object The object to serialize. Must implement {@link java.io.Serializable;}
   * @return The object as a byte array.
   */
  public static <T> byte[] serialize(T object) {
    try {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
      objectOutputStream.writeObject(object);
      return byteArrayOutputStream.toByteArray();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * De-serialize a byte array back to it's original object.
   *
   * @param bytes The bytes that where serialized from an object.
   * @param <K> The type the bytes should be serialised back too.
   * @return The de-serialized object.
   */
  public static <K> K deserialize(byte[] bytes) {
    try {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
      ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
      @SuppressWarnings("unchecked") final K k = (K) objectInputStream.readObject();
      return k;
    } catch (IOException e) {
      throw new RuntimeException(e);
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Takes a class type and constructs it. If the class does not have an empty constructor this
   * will
   * find the parametrized constructor and use nulls and default values to construct the class.
   *
   * @param clazz The class to construct.
   * @param <T> The type of the class to construct.
   * @return The constructed object.
   */
  @SuppressWarnings("unchecked")
  public static <T> T createInstance(Class<T> clazz) {
    if (clazz.isInterface()) {
      if (clazz == List.class) {
        return (T) new ArrayList();
      } else if (clazz == Map.class) {
        return (T) new HashMap();
      }

      throw new UnsupportedOperationException("Interface types can not be instantiated.");
    }

    T created = null;
    Constructor<?>[] constructors = clazz.getConstructors();
    for (Constructor<?> constructor : constructors) {
      if (!Modifier.isPrivate(constructor.getModifiers())) {
        Class<?>[] parameterTypes = constructor.getParameterTypes();
        List<Object> params = new ArrayList<Object>();
        for (Class<?> parameterType : parameterTypes)
          if (!parameterType.isPrimitive()) {
            params.add(null);
          } else {
            if (parameterType == boolean.class) {
              params.add(false);
            } else if (parameterType == byte.class) {
              params.add((byte) 0);
            } else if (parameterType == short.class) {
              params.add((short) 0);
            } else if (parameterType == char.class) {
              params.add('0');
            } else {
              params.add(0);
            }
          }

        try {
          created = (T) constructor.newInstance(params.toArray());
        } catch (InvocationTargetException e) {
          throw new RuntimeException(e);
        } catch (InstantiationException e) {
          throw new RuntimeException(e);
        } catch (IllegalAccessException e) {
          throw new RuntimeException(e);
        }
        break;
      }
    }
    return created;
  }

  private ShillelaghUtil() {
    /* No Instances */
  }
}
