apply plugin: 'maven'
apply plugin: 'signing'

ext {
  SONATYPE_URL = ""
  IS_DEV_BUILD = false
  IS_RELEASE_BUILD = false
}

//set build variables based on build type (release, continuous integration, development)
if (hasProperty("release")) {
  IS_RELEASE_BUILD = true
  SONATYPE_URL = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("snapshot")) {
  VERSION += "-SNAPSHOT"
  SONATYPE_URL = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
  IS_DEV_BUILD = true
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            if (IS_DEV_BUILD) {
                mavenLocal()
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: SONATYPE_URL) {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }

                    pom.project {
                        name 'Shillelagh'
                        packaging 'jar'
                        description 'Shillelagh Sqlite Android library'
                        artifactId = 'shillelagh'
                        groupId GROUP
                        version VERSION
                        url 'https://github.com/pieces029/shillelagh'

                        scm {
                            url 'scm:https://github.com/pieces029/shillelagh'
                            connection 'scm:git:git@github.com:pieces029/shillelagh.git'
                            developerConnection 'scm:git:git@github.com:pieces029/shillelagh.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'areitz'
                                name 'Andrew Reitz'
                                url "http://andrewreitz.com"
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        required { IS_RELEASE_BUILD && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
